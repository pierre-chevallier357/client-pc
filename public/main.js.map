{"version":3,"sources":["./src/app/components/game-results/game-results.component.ts","./src/app/components/game-results/game-results.component.html","./src/environments/environment.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/models/game-result/game-result.enum.ts","./src/app/services/game/game.service.ts","./src/app/components/create-game/create-game.component.html","./src/app/components/create-game/create-game.component.ts","./src/app/components/join-game/join-game.component.html","./src/app/components/join-game/join-game.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/game-rules/game-rules.component.ts","./src/app/components/game-rules/game-rules.component.html","./src/app/app.module.ts","./src/app/services/player/player.service.ts","./src/app/components/waiting-player/waiting-player.component.ts","./src/app/components/waiting-player/waiting-player.component.html","./src/app/components/end-game-dialog/end-game-dialog.component.ts","./src/app/components/end-game-dialog/end-game-dialog.component.html","./src/app/components/game/game.component.ts","./src/app/components/game/game.component.html","./src/app/app-routing.module.ts","./src/app/components/connection/connection.component.ts","./src/app/components/connection/connection.component.html","./src/main.ts","./src/app/components/select-strategy/select-strategy.component.html","./src/app/components/select-strategy/select-strategy.component.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { PlayerService } from './../../services/player/player.service';\nimport { GameService } from 'src/app/services/game/game.service';\nimport { Component, OnInit } from '@angular/core';\nimport { GameResult } from '../../models/game-result/game-result.enum';\n\n@Component({\n  selector: 'app-game-results',\n  templateUrl: './game-results.component.html',\n  styleUrls: ['./game-results.component.scss'],\n})\nexport class GameResultsComponent implements OnInit {\n  result = GameResult;\n  playerResult: GameResult = GameResult.Tie;\n  scores: number[];\n\n  constructor(private gameService: GameService, private playerService: PlayerService) {}\n\n  async ngOnInit(): Promise<void> {\n    await this.getScores();\n    this.getPlayerResult();\n  }\n\n  async getScores() {\n    const gameId = this.gameService.getGameId();\n    const playerId = this.playerService.getPlayerId();\n    this.scores = await this.gameService.getGameResults(gameId, playerId);\n    return this.scores;\n  }\n\n  getPlayerResult(): GameResult {\n    const player1Score = this.scores[0];\n    const player2Score = this.scores[1];\n    let playerResult: GameResult;\n    if (player1Score > player2Score) {\n      playerResult = GameResult.Win;\n    } else if (player1Score === player2Score) {\n      playerResult = GameResult.Tie;\n    } else {\n      playerResult = GameResult.Loss;\n    }\n    this.playerResult = playerResult;\n    return playerResult;\n  }\n}\n","<h2 *ngIf=\"playerResult === result.Win\" align=\"center\">Bravo vous avez gagné !</h2>\n<h2 *ngIf=\"playerResult === result.Tie\" align=\"center\">Égalité avec l'autre joueur.</h2>\n<h2 *ngIf=\"playerResult === result.Loss\" align=\"center\">Dommage, vous avez perdu...</h2>\n<hr />\n<h2 align=\"center\">Score</h2>\n<h2 align=\"center\">Vous &nbsp; &nbsp; &nbsp; {{ scores[0] }} - {{ scores[1] }} &nbsp; &nbsp; &nbsp; Adversaire</h2>\n<br />\n<br />\n<div class=\"wrapper\">\n  <button mat-raised-button class=\"center\" routerLink=\"/home\">Menu principal</button>\n</div>\n","export const environment = {\n  production: false,\n  apiUrl: 'https://serveur-pc.herokuapp.com/',\n  firebaseConfig: {\n    apiKey: 'AIzaSyDxBDplWVzL5-E4TAJckIP-tAQZSEH9lGo',\n    authDomain: 'client-pc.firebaseapp.com',\n    projectId: 'client-pc',\n    storageBucket: 'client-pc.appspot.com',\n    messagingSenderId: '39195826909',\n    appId: '1:39195826909:web:40bd356ab56991aeac9934',\n    measurementId: 'G-E6QZBZ0RFE',\n  },\n};\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>Bienvenue dans le jeu du dilemme du prisonnier !</h2>\n<div class=\"wrapper\">\n  <img src=\"assets/homepage_prisoner.png\" height=\"200px\" />\n  <br />\n  <br />\n  <button mat-raised-button routerLink=\"/connection\" class=\"center\">Commencer</button>\n  &nbsp;\n  <button mat-raised-button routerLink=\"/rules\" class=\"center\">Règles du jeu</button>\n</div>\n","export enum GameResult {\n  Win,\n  Tie,\n  Loss,\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameService {\n  private backendUrl = environment.apiUrl;\n  private gameId: number;\n\n  constructor() {}\n\n  async getAllGamesIds(): Promise<number[]> {\n    const url = await fetch(this.backendUrl + 'all-partie');\n    let concatenatedGames: String = await url.text();\n    let games = concatenatedGames.split('&').map(function (item) {\n      return parseInt(item, 10);\n    });\n    games.splice(-1, 1); // Removes the last game which is NaN\n    return games;\n  }\n\n  async createNewGame(playerId: number, numberOfTurns: number): Promise<number> {\n    const url = await fetch(this.backendUrl + 'creation-partie/' + playerId + '&' + numberOfTurns);\n    let gameId: number = Number(await url.text());\n    this.gameId = gameId;\n    return gameId;\n  }\n\n  getGameId(): number {\n    return this.gameId;\n  }\n\n  setGameId(id: number) {\n    this.gameId = id;\n  }\n\n  async getNumberOfTurns(gameId: number): Promise<number> {\n    const url = await fetch(this.backendUrl + 'nb-coups/' + gameId);\n    let numberOfTurns: number = Number(await url.text());\n    return numberOfTurns;\n  }\n\n  async getGameResults(gameId: number, playerId: number): Promise<number[]> {\n    const url = await fetch(this.backendUrl + 'resultat-final/' + gameId + '&' + playerId);\n    let concatenatedResults: string = await url.text();\n    console.log('concatenatedResults:', concatenatedResults);\n    let results = concatenatedResults.split('&').map(function (item) {\n      return parseInt(item, 10);\n    });\n    console.log('results:', results);\n    return results;\n  }\n}\n","<h2>Nombre de tours</h2>\n<mat-form-field appearance=\"fill\">\n  <mat-label>Sélectionner</mat-label>\n  <mat-select [(ngModel)]=\"numberOfTurns\" name=\"numberOfTurn\">\n    <mat-option *ngFor=\"let turn of turnsList\" [value]=\"turn\">\n      {{ turn }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n<br />\n<button mat-raised-button [disabled]=\"numberOfTurns === undefined\" (click)=\"waitForOtherPlayer()\">\n  Créer la partie\n</button>\n","import { Router } from '@angular/router';\nimport { PlayerService } from './../../services/player/player.service';\nimport { AfterViewInit, Component } from '@angular/core';\nimport { GameService } from 'src/app/services/game/game.service';\n\n@Component({\n  selector: 'app-create-game',\n  templateUrl: './create-game.component.html',\n  styleUrls: ['./create-game.component.scss'],\n})\nexport class CreateGameComponent implements AfterViewInit {\n  gameId: number;\n  playerId: number;\n  numberOfTurns: number;\n  turnsList: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  constructor(private gameService: GameService, private playerService: PlayerService, private router: Router) {}\n\n  ngAfterViewInit(): void {\n    this.getPlayerId();\n    this.getGameId();\n  }\n\n  async createNewGame(): Promise<boolean> {\n    await this.gameService.createNewGame(this.playerId, this.numberOfTurns).then((gameId) => {\n      this.gameId = gameId;\n    });\n    return true;\n  }\n\n  getPlayerId() {\n    this.playerId = this.playerService.getPlayerId();\n  }\n\n  getGameId() {\n    this.gameId = this.gameService.getGameId();\n  }\n\n  async waitForOtherPlayer() {\n    this.getPlayerId();\n    await this.createNewGame();\n    this.router.navigateByUrl('/waiting-player');\n  }\n}\n","<p>Parties disponibles : {{ gamesIds }}</p>\n<mat-form-field appearance=\"fill\">\n  <mat-label>Sélectionner une partie</mat-label>\n  <mat-select [(ngModel)]=\"selectedGameId\">\n    <mat-option *ngFor=\"let game of gamesIds\" [value]=\"game\">\n      {{ game }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n<br />\n<button mat-raised-button [disabled]=\"selectedGameId === undefined\" (click)=\"joinGame()\">Rejoindre la partie</button>\n","import { Router } from '@angular/router';\nimport { PlayerService } from './../../services/player/player.service';\nimport { GameService } from 'src/app/services/game/game.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-join-game',\n  templateUrl: './join-game.component.html',\n  styleUrls: ['./join-game.component.scss'],\n})\nexport class JoinGameComponent implements OnInit {\n  gamesIds: number[];\n  selectedGameId: number;\n  playerId: number;\n\n  constructor(private gameService: GameService, private playerService: PlayerService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.getPlayerId();\n    this.getAllGamesIds();\n  }\n\n  async getAllGamesIds(): Promise<number[]> {\n    let receivedGamesIds: number[];\n    await this.gameService.getAllGamesIds().then((gamesIds) => {\n      receivedGamesIds = gamesIds.map((game) => game);\n    });\n    this.gamesIds = receivedGamesIds;\n    return receivedGamesIds;\n  }\n\n  getPlayerId() {\n    this.playerId = this.playerService.getPlayerId();\n  }\n\n  joinGame() {\n    this.gameService.setGameId(this.selectedGameId);\n    this.playerService\n      .joinGame(this.selectedGameId, this.playerId)\n      .then(() => this.router.navigateByUrl('game/' + this.selectedGameId));\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n","<div class=\"topbar\">\n  <h1>Dilemme du prisonnier</h1>\n</div>\n<div class=\"main\">\n  <router-outlet></router-outlet>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-game-rules',\n  templateUrl: './game-rules.component.html',\n  styleUrls: ['./game-rules.component.scss'],\n})\nexport class GameRulesComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<h2>Règles du dilemme du prisonnier</h2>\nLe dilemme du prisonnier se joue à deux joueurs.\n<br />\n<br />\nCRÉATION D'UNE PARTIE :\n<br />\n<ul>\n  <li>Les deux joueurs saisissent leur nom.</li>\n  <li>Le joueur 1 crée une partie :</li>\n  <li>-Il renseigne alors le nombre de tours que doit comporter la partie et la crée.</li>\n  <li>-La partie créée contient un identifiant que devra renseigner le joueur 2.</li>\n  <li>Le joueur 2 rejoint une partie :</li>\n  <li>-Il doit sélectionner l'identifiant de la partie qu'a créé le joueur 1.</li>\n</ul>\n<br />\nJOUER AU JEU :\n<br />\n<ul>\n  <li>À chaque tour, le joueur choisi s'il souhaite coopérer ou trahir son adversaire.</li>\n  <li>Selon ce qu'a choisi l'adversaire, le joueur empoche un certain nombre de points :</li>\n  <li>-Le joueur a coopéré et l'adversaire aussi : 3 points chacuns.</li>\n  <li>-Le joueur a trahi et l'adversaire aussi : 1 point chacuns.</li>\n  <li>-Le joueur a coopéré et l'adversaire a trahi : 0 point pour le joueur et 5 pour l'adversaire.</li>\n  <li>-Le joueur a trahi et l'adversaire a coopéré : 5 point pour le joueur et 0 pour l'adversaire.</li>\n  <li>À la fin du tour, le joueur est informé du coup qu'a décidé de faire l'adversaire.</li>\n</ul>\n<br />\nARRÊTER DE JOUER :\n<br />\n<ul>\n  <li>Un joueur peut, quand il le souhaite, arrêter de jouer.</li>\n  <li>\n    Dans ce cas, il doit sélectionner une stratégie que devra adopter l'ordinateur pour jouer à sa place, et il sera\n    rédirigé vers le menu principal.\n  </li>\n</ul>\n<br />\nFIN DE LA PARTIE :\n<br />\n<ul>\n  <li>À la fin de la partie, les deux joueurs se voient afficher les résultats de la partie.</li>\n</ul>\n<button mat-raised-button routerLink=\"/home\" class=\"center\">Menu principal</button>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './components//game/game.component';\nimport { ConnectionComponent } from './components/connection/connection.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { CreateGameComponent } from './components/create-game/create-game.component';\nimport { JoinGameComponent } from './components/join-game/join-game.component';\nimport { WaitingPlayerComponent } from './components/waiting-player/waiting-player.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { GameResultsComponent } from './components/game-results/game-results.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { EndGameDialogComponent } from './components/end-game-dialog/end-game-dialog.component';\nimport { SelectStrategyComponent } from './components/select-strategy/select-strategy.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { GameRulesComponent } from './components/game-rules/game-rules.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GameComponent,\n    ConnectionComponent,\n    CreateGameComponent,\n    JoinGameComponent,\n    WaitingPlayerComponent,\n    GameResultsComponent,\n    EndGameDialogComponent,\n    SelectStrategyComponent,\n    HomeComponent,\n    GameRulesComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    MatDialogModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { environment } from './../../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport { Strategy } from 'src/app/models/strategy/strategy.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlayerService {\n  private backendUrl = environment.apiUrl;\n  private playerId: number;\n\n  constructor() {}\n\n  async getAllPlayersIds(): Promise<number[]> {\n    const url = await fetch(this.backendUrl + 'all-joueur-by-id');\n    let concatenatedPlayers: String = await url.text();\n    let players = concatenatedPlayers.split('&').map(function (item) {\n      return parseInt(item, 10);\n    });\n    players.splice(-1, 1); // Removes the last player which is NaN\n    return players;\n  }\n\n  async createPlayer(firstname: string): Promise<number> {\n    const url = await fetch(this.backendUrl + 'creation-joueur/' + firstname);\n    let playerId: number = Number(await url.text());\n    this.playerId = playerId;\n    return playerId;\n  }\n\n  setPlayerId(id: number) {\n    this.playerId = id;\n  }\n\n  getPlayerId(): number {\n    return this.playerId;\n  }\n\n  async waitForOtherPlayer(gameId: number, playerId: number): Promise<boolean> {\n    const url = await fetch(this.backendUrl + 'attente-connection/' + gameId + '&' + playerId);\n    let otherPlayerJoined: boolean = Boolean(await url.text());\n    return otherPlayerJoined;\n  }\n\n  async joinGame(gameId: number, playerId: number): Promise<boolean> {\n    const url = await fetch(this.backendUrl + 'rejoindrePartie/' + gameId + '&' + playerId);\n    let playerJoined: boolean = Boolean(await url.text());\n    return playerJoined;\n  }\n\n  async sendTurnDecision(gameId: number, playerId: number, turn: string): Promise<boolean> {\n    const url = await fetch(this.backendUrl + 'coup/' + gameId + '&' + playerId + '&' + turn);\n    let turnSent: boolean = Boolean(await url.text());\n    return turnSent;\n  }\n\n  async playTheTurn(gameId: number, playerId: number): Promise<boolean> {\n    const url = await fetch(this.backendUrl + 'partie/' + gameId + '&' + playerId);\n    let turnPlayed: boolean = Boolean(await url.text());\n    return turnPlayed;\n  }\n\n  async getPlayerScore(gameId: number, playerId: number): Promise<number> {\n    const url = await fetch(this.backendUrl + 'resultat-tour/' + gameId + '&' + playerId);\n    let playerScore: number = Number(await url.text());\n    return playerScore;\n  }\n\n  async getOpponentsLastTurn(gameId: number, playerId: number): Promise<string> {\n    const url = await fetch(this.backendUrl + 'dernier-coup-adv/' + gameId + '&' + playerId);\n    let opponentsLastTurn: string = await url.text();\n    return opponentsLastTurn;\n  }\n\n  async setComputerStrategy(gameId: number, playerId: number, strategy: Strategy): Promise<boolean> {\n    const url = await fetch(this.backendUrl + 'strategie/' + gameId + '&' + playerId + '&' + strategy.id);\n    let strategySent: boolean = Boolean(await url.text());\n    return strategySent;\n  }\n}\n","import { GameService } from 'src/app/services/game/game.service';\nimport { PlayerService } from './../../services/player/player.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-waiting-player',\n  templateUrl: './waiting-player.component.html',\n  styleUrls: ['./waiting-player.component.scss'],\n})\nexport class WaitingPlayerComponent implements OnInit {\n  playerId: number;\n  gameId: number;\n\n  constructor(private playerService: PlayerService, private gameService: GameService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.getGameId();\n    this.getPlayerId();\n    this.waitForOtherPlayer();\n  }\n\n  getPlayerId() {\n    this.playerId = this.playerService.getPlayerId();\n  }\n\n  getGameId() {\n    this.gameId = this.gameService.getGameId();\n  }\n\n  async waitForOtherPlayer() {\n    this.getGameId();\n    this.playerService\n      .waitForOtherPlayer(this.gameId, this.playerId)\n      .then(() => this.router.navigateByUrl('game/' + this.gameId));\n  }\n}\n","<mat-spinner></mat-spinner>\n<p>En attente de l'adversaire...</p>\n<p>Numéro de la partie : {{ gameId }}</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-end-game-dialog',\n  templateUrl: './end-game-dialog.component.html',\n  styleUrls: ['./end-game-dialog.component.scss']\n})\nexport class EndGameDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2 mat-dialog-title align=\"center\">⚠️ Attention ⚠️</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Arrêter de jouer fera jouer l'ordinateur à votre place, vous devrez sélectionner la stratégie qu'il doit adopter, et\n    quitterez la partie.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial routerLink=\"/select-strategy/\">Arrêter de jouer</button>\n  &nbsp;\n  <button mat-button mat-dialog-close>Annuler</button>\n</mat-dialog-actions>\n","import { Router } from '@angular/router';\nimport { EndGameDialogComponent } from './../end-game-dialog/end-game-dialog.component';\nimport { PlayerService } from './../../services/player/player.service';\nimport { Component, OnInit } from '@angular/core';\nimport { GameService } from 'src/app/services/game/game.service';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss'],\n})\nexport class GameComponent implements OnInit {\n  selectedDecision: string;\n  opponentsLastTurn: string;\n  playerScore: number = 0;\n  numberOfTurns: number;\n  turnCounter: number = 1;\n  playersIds: number[];\n  pushedGiveUpButton: boolean = false;\n\n  constructor(\n    private gameService: GameService,\n    private playerService: PlayerService,\n    public dialog: MatDialog,\n    private router: Router\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    await this.getNumberOfTurns();\n    this.getPlayerId();\n    this.getGameId();\n    this.getNumberOfTurns();\n  }\n\n  getPlayerId() {\n    return this.playerService.getPlayerId();\n  }\n\n  getGameId() {\n    return this.gameService.getGameId();\n  }\n\n  async sendTurnDecision() {\n    await this.playerService.sendTurnDecision(this.getGameId(), this.getPlayerId(), this.selectedDecision);\n  }\n\n  async playTheTurn() {\n    await this.playerService.playTheTurn(this.getGameId(), this.getPlayerId());\n  }\n\n  async getPlayerScore(): Promise<number> {\n    let turnResult = await this.playerService.getPlayerScore(this.getGameId(), this.getPlayerId());\n    return turnResult;\n  }\n\n  async getOpponentsLastTurn(): Promise<string> {\n    let opponentsLastTurn = await this.playerService.getOpponentsLastTurn(this.getGameId(), this.getPlayerId());\n    return opponentsLastTurn;\n  }\n\n  async playTurnAndGetResults() {\n    await this.sendTurnDecision();\n    await this.playTheTurn();\n    let playerScore = await this.getPlayerScore();\n    this.playerScore = playerScore;\n    let opponentsLastTurn = await this.getOpponentsLastTurn();\n    this.opponentsLastTurn = opponentsLastTurn;\n    if (this.turnCounter === this.numberOfTurns) {\n      this.gameService.getGameResults(this.getGameId(), this.getPlayerId());\n      this.router.navigateByUrl('/game-results');\n    } else {\n      this.incrementTurnCounter();\n    }\n  }\n\n  incrementTurnCounter() {\n    this.turnCounter++;\n  }\n\n  async getNumberOfTurns() {\n    this.numberOfTurns = await this.gameService.getNumberOfTurns(this.getGameId());\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(EndGameDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\n}\n","<h2 align=\"center\">Tour {{ turnCounter }} sur {{ numberOfTurns }}</h2>\n<br />\n<p>Dernier coup de l'adversaire : {{ opponentsLastTurn }}</p>\n<p>Votre score : {{ playerScore }}</p>\n\n<hr />\n\n<br />\n<h2 align=\"center\">Décision</h2>\n<br />\n<div class=\"wrapper\">\n  <button mat-raised-button (click)=\"selectedDecision = 'COOPERER'; playTurnAndGetResults()\" class=\"center\">\n    Coopérer\n  </button>\n  &nbsp;\n  <button mat-raised-button (click)=\"selectedDecision = 'TRAHIR'; playTurnAndGetResults()\" class=\"center\">\n    Trahir\n  </button>\n  <br />\n  <button mat-button (click)=\"openDialog()\" class=\"center\">Arrêter de jouer</button>\n</div>\n","import { SelectStrategyComponent } from './components/select-strategy/select-strategy.component';\nimport { GameResultsComponent } from './components/game-results/game-results.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ConnectionComponent } from './components/connection/connection.component';\nimport { GameComponent } from './components//game/game.component';\nimport { CreateGameComponent } from './components/create-game/create-game.component';\nimport { JoinGameComponent } from './components/join-game/join-game.component';\nimport { WaitingPlayerComponent } from './components/waiting-player/waiting-player.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { GameRulesComponent } from './components/game-rules/game-rules.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n  { path: 'game/:id', component: GameComponent },\n  { path: 'connection', component: ConnectionComponent },\n  { path: 'create-game', component: CreateGameComponent },\n  { path: 'join-game', component: JoinGameComponent },\n  { path: 'waiting-player', component: WaitingPlayerComponent },\n  { path: 'game-results', component: GameResultsComponent },\n  { path: 'select-strategy', component: SelectStrategyComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'rules', component: GameRulesComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Router } from '@angular/router';\nimport { PlayerService } from './../../services/player/player.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-connection',\n  templateUrl: './connection.component.html',\n  styleUrls: ['./connection.component.scss'],\n})\nexport class ConnectionComponent implements OnInit {\n  firstname = new FormControl('');\n  playerId: number;\n  selectedCreateNewGame: boolean = true;\n\n  constructor(private playerService: PlayerService, private router: Router) {}\n\n  ngOnInit() {}\n\n  createPlayer() {\n    this.playerService.createPlayer(this.firstname.value).then((id) => {\n      this.playerId = id;\n      this.playerService.setPlayerId(id);\n      if (this.selectedCreateNewGame) {\n        this.router.navigateByUrl('/create-game');\n      } else {\n        this.router.navigateByUrl('/join-game');\n      }\n    });\n  }\n}\n","<h2>Prénom</h2>\n<mat-form-field>\n  <input matInput [formControl]=\"firstname\" placeholder=\"Indiquez votre nom\" />\n</mat-form-field>\n<br /><br />\n<button mat-raised-button [disabled]=\"firstname.value === ''\" (click)=\"selectedCreateNewGame = true; createPlayer()\">\n  Créer une partie\n</button>\n&nbsp;\n<button mat-raised-button [disabled]=\"firstname.value === ''\" (click)=\"selectedCreateNewGame = false; createPlayer()\">\n  Rejoindre une partie\n</button>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","<h2>Stratégie de l'ordinateur</h2>\n<mat-form-field appearance=\"fill\">\n  <mat-label>Sélectionner</mat-label>\n  <mat-select [(ngModel)]=\"selectedStrategy\" name=\"selectedStrategy\">\n    <mat-option *ngFor=\"let strategy of strategiesList\" [value]=\"strategy\">\n      {{ strategy.name }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n<br />\n<button mat-button [disabled]=\"selectedStrategy === undefined\" (click)=\"setComputerStrategy()\">Confirmer</button>\n","import { Router } from '@angular/router';\nimport { GameService } from 'src/app/services/game/game.service';\nimport { PlayerService } from './../../services/player/player.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Strategy } from 'src/app/models/strategy/strategy.model';\n\n@Component({\n  selector: 'app-select-strategy',\n  templateUrl: './select-strategy.component.html',\n  styleUrls: ['./select-strategy.component.scss'],\n})\nexport class SelectStrategyComponent implements OnInit {\n  gameId: number;\n  playerId: number;\n  selectedStrategy: Strategy;\n  strategiesList: Strategy[] = [\n    { id: 1, name: 'Aléatoire' },\n    { id: 2, name: 'Donnant pour deux donnants' },\n    { id: 3, name: 'Donnant pour deux donnants et aléatoire' },\n    { id: 4, name: 'Donnant donnant' },\n    { id: 5, name: 'Donnant donnant/aléatoire' },\n    { id: 6, name: 'Pacificateur naïf' },\n    { id: 7, name: 'Rancunier' },\n    { id: 8, name: 'Sondeur naïf' },\n    { id: 9, name: 'Sondeur repentant' },\n    { id: 10, name: 'Toujours coopérer' },\n    { id: 11, name: 'Toujours trahir' },\n    { id: 12, name: 'Vrai pacificateur' },\n  ];\n\n  constructor(private playerService: PlayerService, private gameService: GameService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.gameId = this.gameService.getGameId();\n    this.playerId = this.playerService.getPlayerId();\n  }\n\n  async setComputerStrategy() {\n    await this.playerService\n      .setComputerStrategy(this.gameId, this.playerId, this.selectedStrategy)\n      .then(() => this.router.navigateByUrl('/home'));\n  }\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}